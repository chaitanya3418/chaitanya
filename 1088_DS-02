{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1gt5pGI1a2A7xHst4Z7gL6IZH5mTAIYoj",
      "authorship_tag": "ABX9TyPWhwCUuTrLTgwcl86UCkCa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chaitanya3418/chaitanya/blob/main/1088_DS-02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reg. No:1088\n",
        "# Name :chaitanya neerukattu\n",
        "# Date: 21-10-22"
      ],
      "metadata": {
        "id": "OnMt-EJ8732x"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JPhtmc00QWS5",
        "outputId": "62c06209-678a-4aed-c422-dfb4fd733661"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/grive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/grive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "Jr-JhFJAQ53F"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/ScreeningTest_18102022.csv')"
      ],
      "metadata": {
        "id": "hLIuVy3pQ-0_"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjbtohW_RLJg",
        "outputId": "a4c6b73b-bb3e-488c-922a-2839566e45ba"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnrollmentNo    int64\n",
              "QuizId          int64\n",
              "Correct         int64\n",
              "TimeTaken       int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "2fMUrPo0RRmX",
        "outputId": "d1b12b4e-18a7-45c3-f7ef-c74b3f605a35"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       EnrollmentNo      QuizId     Correct   TimeTaken\n",
              "count    241.000000  241.000000  241.000000  241.000000\n",
              "mean     121.000000  187.493776   15.543568    9.730290\n",
              "std       69.714896    0.742296    3.273500    4.943628\n",
              "min        1.000000  187.000000    1.000000    0.000000\n",
              "25%       61.000000  187.000000   14.000000    6.000000\n",
              "50%      121.000000  187.000000   16.000000   10.000000\n",
              "75%      181.000000  188.000000   18.000000   13.000000\n",
              "max      241.000000  189.000000   20.000000   20.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-236216be-426f-456e-90f5-0c04db312fc7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EnrollmentNo</th>\n",
              "      <th>QuizId</th>\n",
              "      <th>Correct</th>\n",
              "      <th>TimeTaken</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>241.000000</td>\n",
              "      <td>241.000000</td>\n",
              "      <td>241.000000</td>\n",
              "      <td>241.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>121.000000</td>\n",
              "      <td>187.493776</td>\n",
              "      <td>15.543568</td>\n",
              "      <td>9.730290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>69.714896</td>\n",
              "      <td>0.742296</td>\n",
              "      <td>3.273500</td>\n",
              "      <td>4.943628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>187.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>61.000000</td>\n",
              "      <td>187.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>121.000000</td>\n",
              "      <td>187.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>181.000000</td>\n",
              "      <td>188.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>13.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>241.000000</td>\n",
              "      <td>189.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>20.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-236216be-426f-456e-90f5-0c04db312fc7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-236216be-426f-456e-90f5-0c04db312fc7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-236216be-426f-456e-90f5-0c04db312fc7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U4OYCBCrRk60",
        "outputId": "24407e90-676e-491d-def6-fb8242ab229b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(241, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.hist(figsize=(10,10),bins=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 695
        },
        "id": "yhRf6ioDR1ah",
        "outputId": "fd2edd34-9162-4295-d4fe-07bcd6578a4c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fd630ff6f90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fd630fd5590>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fd630f8eb90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fd630f501d0>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.pie(df['QuizId'].value_counts(),labels=['187','188','189'],autopct=\"%0.2f\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "zAD5QKwNSKRB",
        "outputId": "4864de5a-4224-4b21-97be-a762ee635778"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([<matplotlib.patches.Wedge at 0x7fd63090ee10>,\n",
              "  <matplotlib.patches.Wedge at 0x7fd630919590>,\n",
              "  <matplotlib.patches.Wedge at 0x7fd630919e10>],\n",
              " [Text(-0.5165594516042673, 0.9711675102464553, '187'),\n",
              "  Text(0.021507611960699606, -1.0997897174586369, '188'),\n",
              "  Text(0.9810818665209591, -0.49747198030014833, '189')],\n",
              " [Text(-0.28175970087505486, 0.5297277328617028, '65.56'),\n",
              "  Text(0.011731424705836149, -0.5998853004319836, '19.50'),\n",
              "  Text(0.5351355635568867, -0.27134835289098996, '14.94')])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['EnrollmentNo'].value_counts()"
      ],
      "metadata": {
        "id": "lCV1ww61TVom",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "addb3e5d-4d9e-4e75-b22f-5232e043349d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1      1\n",
              "122    1\n",
              "154    1\n",
              "155    1\n",
              "156    1\n",
              "      ..\n",
              "86     1\n",
              "87     1\n",
              "88     1\n",
              "89     1\n",
              "241    1\n",
              "Name: EnrollmentNo, Length: 241, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['QuizId'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPlvQoHqimVn",
        "outputId": "fdf2b71c-1eea-4f91-ac88-6b16793e8ead"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "187    158\n",
              "188     47\n",
              "189     36\n",
              "Name: QuizId, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.mean(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d61V3yGokzWn",
        "outputId": "49ddc7d0-90c6-48fb-ebc1-e3e377d5d667"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo    121.000000\n",
            "QuizId          187.493776\n",
            "Correct          15.543568\n",
            "TimeTaken         9.730290\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " print(df.median(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uf_ezSptn0iX",
        "outputId": "4bbc9c97-ef0b-4d6e-d018-256ab7024b3a"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo    121.0\n",
            "QuizId          187.0\n",
            "Correct          16.0\n",
            "TimeTaken        10.0\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.mode(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_6f0tlSn9Gn",
        "outputId": "8e5a8ebf-0f6e-4b35-fb11-af649c454c53"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     EnrollmentNo  QuizId  Correct  TimeTaken\n",
            "0               1   187.0     17.0       11.0\n",
            "1               2     NaN      NaN        NaN\n",
            "2               3     NaN      NaN        NaN\n",
            "3               4     NaN      NaN        NaN\n",
            "4               5     NaN      NaN        NaN\n",
            "..            ...     ...      ...        ...\n",
            "236           237     NaN      NaN        NaN\n",
            "237           238     NaN      NaN        NaN\n",
            "238           239     NaN      NaN        NaN\n",
            "239           240     NaN      NaN        NaN\n",
            "240           241     NaN      NaN        NaN\n",
            "\n",
            "[241 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.min(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UpgoWDin-5_",
        "outputId": "244c79a8-130a-4e9b-b035-5a55176475fe"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo      1\n",
            "QuizId          187\n",
            "Correct           1\n",
            "TimeTaken         0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.max(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BLQql-kAoGvh",
        "outputId": "5da07d0d-6bac-406a-8b5f-23bc8b4ed6ce"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo    241\n",
            "QuizId          189\n",
            "Correct          20\n",
            "TimeTaken        20\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.min(numeric_only = True) - df.min(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o5hoNZ3AoM9_",
        "outputId": "3e39974a-6866-495f-bdf4-10ff60d1a68e"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo    0\n",
            "QuizId          0\n",
            "Correct         0\n",
            "TimeTaken       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.std(numeric_only = True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y8R2xlynoZaW",
        "outputId": "2eec9dc7-95a0-479d-fc9c-bf5f4e4a8b62"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EnrollmentNo    69.714896\n",
            "QuizId           0.742296\n",
            "Correct          3.273500\n",
            "TimeTaken        4.943628\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.quantile(q=0.25, numeric_only = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mP5wyKpomAj",
        "outputId": "060e265e-025a-421e-8664-d42ef65ce5f2"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnrollmentNo     61.0\n",
              "QuizId          187.0\n",
              "Correct          14.0\n",
              "TimeTaken         6.0\n",
              "Name: 0.25, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.quantile(q=0.5, numeric_only = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fh_QVeDoo20J",
        "outputId": "c0a2dc07-94c2-4715-ba4a-e1dfeeccff04"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnrollmentNo    121.0\n",
              "QuizId          187.0\n",
              "Correct          16.0\n",
              "TimeTaken        10.0\n",
              "Name: 0.5, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.quantile(q=0.75, numeric_only = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9VaTSBUspAHj",
        "outputId": "d05e4a3b-db57-4236-8b4b-01c07cc20204"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnrollmentNo    181.0\n",
              "QuizId          188.0\n",
              "Correct          18.0\n",
              "TimeTaken        13.0\n",
              "Name: 0.75, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "iqr = df.quantile(q=0.75, numeric_only = True) - df.quantile(q=0.25, numeric_only = True)"
      ],
      "metadata": {
        "id": "2mxemgKCpFLI"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "iqr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Et0ywIUspPGc",
        "outputId": "bfcf9b92-9ffc-4386-d713-0d7d980c7999"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EnrollmentNo    120.0\n",
              "QuizId            1.0\n",
              "Correct           4.0\n",
              "TimeTaken         7.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot.box()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "eV4pT2gQpQ2y",
        "outputId": "52285736-dd29-40e7-a1a0-4dbfd0168b52"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd6310cfa50>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.EnrollmentNo.plot.box()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "txoUmOUVqL3v",
        "outputId": "f280af24-cbf0-435b-e8f6-96cc44ed326b"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd6307b2b10>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.QuizId.plot.box()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "XWbFaGWtqSfo",
        "outputId": "ee33eb94-acf5-4cd3-eccd-9f61d47e3da8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd63078f0d0>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Correct.plot.box()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "MuLexR-PqXNa",
        "outputId": "24e2492e-1130-4ead-bd17-555864971c61"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd6307b7710>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.TimeTaken.plot.box()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "RXalqihxqaqW",
        "outputId": "f0e55456-72cc-4347-8bd2-81063e9fb144"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd630dc8f90>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def outlier (a):\n",
        "  q1 =np.quantile(a,0.25)\n",
        "  q2 =np.quantile(a,0.75)\n",
        "  m = np.median(a)\n",
        "  iqr = q2-q1\n",
        "  u_bound = q2+(1.5*iqr)\n",
        "  l_bound = q1-(1.5*iqr)\n",
        "  print(iqr,u_bound,l_bound)\n",
        "  print(\"INTER QUANTILE RANGE:\",iqr)\n",
        "  outliers = a[(a<= l_bound)|(a>= u_bound)]\n",
        "  print(\"outliers in boxplot:\\n{}\".format(outliers))"
      ],
      "metadata": {
        "id": "IM-QyJ1DqkA8"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outlier(df['EnrollmentNo'])"
      ],
      "metadata": {
        "id": "udhEpBvuwasD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3680606c-2fdf-476d-e396-dcf6207b0593"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "120.0 361.0 -119.0\n",
            "INTER QUANTILE RANGE: 120.0\n",
            "outliers in boxplot:\n",
            "Series([], Name: EnrollmentNo, dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "outlier(df['QuizId'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HoMOaKL7hpU",
        "outputId": "b5c028c8-c5e5-4d50-97a4-370e6a657685"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 189.5 185.5\n",
            "INTER QUANTILE RANGE: 1.0\n",
            "outliers in boxplot:\n",
            "Series([], Name: QuizId, dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "outlier(df['Correct'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "otUNiUZ27nf4",
        "outputId": "96c3fda9-6d9b-401c-d3cb-9af680961ea6"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.0 24.0 8.0\n",
            "INTER QUANTILE RANGE: 4.0\n",
            "outliers in boxplot:\n",
            "9      8\n",
            "20     1\n",
            "67     1\n",
            "71     1\n",
            "85     6\n",
            "100    2\n",
            "164    8\n",
            "170    2\n",
            "177    8\n",
            "Name: Correct, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "outlier(df['TimeTaken'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6_PGIG07tI5",
        "outputId": "fda4a037-d268-43c4-9631-e0b3025f6b1c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.0 23.5 -4.5\n",
            "INTER QUANTILE RANGE: 7.0\n",
            "outliers in boxplot:\n",
            "Series([], Name: TimeTaken, dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vJTfghqL7zvV"
      },
      "execution_count": 33,
      "outputs": []
    }
  ]
}